// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// title, couponCode, expiryDate
model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model style {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  primaryColor  String?
  secondaryColor String?
  bgImage   String? @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  footerColor String?
  topBannerImage  String? @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  link      String?
  imageUrl  String   @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  previewImageUrl  String ?  @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productIds String[] @default([])
}

// Relationships

// 1 to 1 Relationship User => Profile Relation
// 1 to Many => Category => Product Relation
// many to many => Market => Category

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  imageUrl    String? @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  description String?
  isActive    Boolean
  products    Product[]
  subCategories    SubCategory[]
  icon     String ?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
model SubCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String? @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  products    Product[]
  categoryId     String   @db.ObjectId
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String   @unique
  imageUrl       String?  @default("https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg")
  productImages  String[] @default(["https://utfs.io/f/aa568418-002c-40a1-b13f-a0fd7eef1353-9w6i5v.svg"])
  description    String?
  isActive       Boolean
  isWholesale    Boolean
  sku            String?
  barcode        String?
  productCode    String?
  unit           String?
  productPrice   Float
  salePrice      Float
  wholesalePrice Float?
  wholesaleQty   Int?
  productStock   Int?
  qty            Int?
  tags           String[]
  categoryId     String   @db.ObjectId
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subCategoryId     String   @db.ObjectId
  subCategory       SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type      String ? @default("topdeals")
  orderItems OrderItem[]
  sales      Sale[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?        @unique
  password          String
  emailVerified     Boolean        @default(false)
  role              UserRole       @default(USER)
  plan             String?        
  verificationToken String?
  status            Boolean        @default(false)
  profile           UserProfile? // Link to user profile
  orders            Order[] //User can have multiple Orders
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sales              Sale[]
}

model UserProfile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  image       String?
  username    String?
  phoneNumber String?
  dateOfBirth DateTime?
  bio         String?
  address     String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId      String    @unique @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  // Personal Details
  firstName     String
  lastName      String
  email         String
  phone         String
  // shipping details
  streetAddress String?
  city          String?
  country       String?
  apartment     String?
      state     String?
      zip       String?
  shippingCost  Float?
  orderNumber   String?
   region        String?
  district      String?
  county        String?
  //Payment Method
  paymentMethod String

  // Order Items
  orderItems OrderItem[]

  // Status
  orderStatus OrderStatus @default(PROCESSING) // Set PROCESSING as the default value
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sales       Sale[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String   @db.ObjectId
  imageUrl  String?
  title     String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  productId    String   @db.ObjectId
  vendorId     String   @db.ObjectId
  total        Float
  productTitle String
  productImage String
  productPrice Float
  productQty   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendor       User     @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
